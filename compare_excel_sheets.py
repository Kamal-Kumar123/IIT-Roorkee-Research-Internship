# -*- coding: utf-8 -*-
"""sheet_compare_Kl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aw40ns6-Bzpty0ZrIW__1tWjeD-1A9u3
"""

# Here we just compare two excel sheet data one from previous research another from latest research.
# dataset path: you can directly use path on the basis of your directory.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

previous = pd.read_csv('/content/drive/MyDrive/kamal/beam_search_previous.xlsx - Sheet1.csv')
latest = pd.read_csv('/content/drive/MyDrive/kamal/beam_search_latest.xlsx - Sheet1.csv')

# Add a new column 'mean' with the mean of each row's selected columns
previous['mean'] = previous[['BLEU_1', 'BLEU_2', 'BLEU_3', 'BLEU_4', 'METEOR', 'ROUGE_L', 'CIDEr']].mean(axis=1)
latest['mean'] = latest[['BLEU_1', 'BLEU_2', 'BLEU_3', 'BLEU_4', 'METEOR', 'ROUGE_L', 'CIDEr']].mean(axis=1)


print(previous)
print(latest)

latest.describe()

previous.head()

latest.head()

subtracted = previous.copy()
for i in range(1 , 9):
  subtracted.iloc[:, i] = latest.iloc[:, i] - previous.iloc[:, i]



subtracted

encoders = subtracted.iloc[:, 0]
columns_names = subtracted.columns[1:9]
columns_names

plt.figure(figsize=(12, 6))  # Adjust figure size for better spacing

for i in range(1, 9):

  plt.plot(encoders, previous.iloc[:, i], label='Previous',marker='o' )
  plt.plot(encoders, latest.iloc[:, i], label='Latest',marker='o')  # Add latest data to the plot

  plt.xlabel('Encoders')
  plt.ylabel(columns_names[i-1] )
  plt.title(columns_names[i-1] +" Trend across Encoders")

  plt.subplots_adjust(wspace=0.6)  # Adjust the space between subplots
  plt.grid(True)
  plt.legend(title = "Encoder")

  # Increase distance between vertical columns
  plt.tight_layout()

  # Rotate x-axis labels to make them visible
  plt.xticks(rotation=45, ha='right')

  plt.show()

# # Assuming `subtracted` is your DataFrame
# # Extract encoder names and mean improvement values
# encoders = subtracted['Unnamed: 0']
# mean_improvement = subtracted['mean_improvement']

# # Plotting the bar chart
# plt.figure(figsize=(12, 6))
# plt.bar(encoders, mean_improvement, color='skyblue')
# plt.xlabel("Encoders")
# plt.ylabel("Mean Improvement")
# plt.title("Mean Improvement for Each Encoder")
# plt.xticks(rotation=45, ha='right')
# plt.grid(axis='y', linestyle='--', alpha=0.7)

# # Display the plot
# plt.show()

# prompt: Using Cohenâ€™s d to compare the improvement fo reach metric
# of subtraactes data

def cohen_d(x, y):
  """Calculate Cohen's d for two groups."""
  nx = len(x)
  ny = len(y)
  dof = nx + ny - 2
  return (np.mean(x) - np.mean(y)) / np.sqrt(((nx-1)*np.std(x)**2 + (ny-1)*np.std(y)**2) / dof)

# Calculate Cohen's d for each metric
cohens_d_results = {}
for column1, column2 in zip(previous.columns[1:], latest.columns[1:]):

  cohens_d_results[column1] = cohen_d(previous[column1],latest[column2])
  print(f"Cohen's d for {column1}: {cohens_d_results[column1]}")


# You can also visualize these results if you want, e.g., using a bar plot

plt.figure(figsize=(10, 6))
plt.bar(cohens_d_results.keys(), cohens_d_results.values())
plt.xlabel("Metric")
plt.ylabel("Cohen's d")
plt.title("Effect Size (Cohen's d) for matrix across encoders")
plt.xticks(rotation=45, ha='right')
plt.axhline(y= 0.5, color= 'red', linestyle='--', linewidth=1, label='medium Effect')

plt.axhline(y= 0.2, color= 'green', linestyle='--', linewidth=1, label = "small Effect")
plt.axhline(y= 0.8, color= 'pink', linestyle='--',  linewidth=1, label = "large Effect")
plt.legend()
plt.show()